name: Release to Master branch

on:
  push:
    branches:
      - master # Trigger workflow on commits to the master branch

jobs:
  update-version:
    runs-on: ubuntu-latest

    steps:

    # Pre-checks! Don't continue if GPG key not configured
    - name: Check Private Key
      run: |
        if [ -z "${{ secrets.GPG_PRIVATE_KEY }}" ]; then
          echo "GPG_PRIVATE_KEY is missing! Configure your GPG Key as a repository secret."
          exit 1
        else
          echo "GPG_PRIVATE_KEY is present."
        fi

    # Ensure GPG Passphrase is set
    - name: Check Secret Passphrase
      run: |
        if [ -z "${{ secrets.GPG_PASSPHRASE }}" ]; then
          echo "GPG_PASSPHRASE is missing! Configure your GPG Passphrase as a repository secret."
          exit 1
        else
          echo "GPG_PASSPHRASE is present."
        fi

    # Add license keys for paid dependencies
    - name: Configure NPM Authentication
      run: |
        echo "@fortawesome:registry=https://npm.fontawesome.com/" > ~/.npmrc
        echo "//npm.fontawesome.com/:_authToken=${{ secrets.FONT_AWESOME_NPM_TOKEN }}" > ~/.npmrc

    # Step 1: Checkout the repository
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        fetch-depth: 0  # Ensures full history and all tags are fetched

    # Step 2: Install Composer Dependencies (non-dev)
    - name: Install Composer dependencies
      run: |
        composer install --no-dev --prefer-dist --optimize-autoloader

    # Step 3: Install NPM Dependencies (non-dev)
    - name: Install NPM dependencies
      run: |
        npm ci --production
        rm .npmrc

    # Step 4: Get the latest tag
    - name: Fetch all tags
      run: git fetch --tags --force

    # Get the latest tag that matches a version pattern
    - name: Get Latest Git Tag
      id: get_version
      run: |
        TAG=$(git describe --tags --abbrev=0)
        echo "version=${TAG}" >> $GITHUB_ENV

    # Step 5: Update the VERSION file
    - name: Update VERSION file
      run: |
        echo -e "${{ env.version }}\n" > VERSION
        git config --global user.name "GitHub Actions"
        git config --global user.email "actions@github.com"
        git add VERSION
        git commit -m "Saving VERSION to ${{ env.version }}"
        git push origin HEAD

    # Step 6: Verify VERSION file content (Optional)
    - name: Display VERSION file
      run: cat VERSION

    # Step 7: Create a ZIP archive of the repository (exclude unnecessary folders)
    - name: Create Release Package
      run: |
        zip -r release.zip . -x ".git/*" ".github/*" "docs/*"

    # Generate a SHA256 checksum for the ZIP archive
    - name: Generate Checksum
      run: |
        sha256sum release.zip > release.zip.sha256

    # Import the GPG private key
    - name: Sign Checksum
      run: |
        echo "${{ secrets.GPG_PRIVATE_KEY }}" | gpg --batch --import
        echo "${{ secrets.GPG_PASSPHRASE }}" | gpg --pinentry-mode loopback --batch --yes --passphrase-fd 0 --armor --detach-sign -o release.zip.sha256.asc release.zip.sha256

    # Publish Git Release
    - name: Publish Release
      id: publish_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ env.version }}
        release_name: "${{ env.version }} Release"
        body: "Release package for v${{ env.version }}."
        draft: false
        prerelease: false

    # Attach release ZIP archive
    - name: Upload Release Assets
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.publish_release.outputs.upload_url }}
        asset_path: release.zip
        asset_name: release.zip
        asset_content_type: application/zip

    # Attach Checksum file to the release
    - name: Upload Checksum File
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.publish_release.outputs.upload_url }}
        asset_path: release.zip.sha256
        asset_name: release.zip.sha256
        asset_content_type: text/plain

    # Attach signature file to the release
    - name: Upload Signature File
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.publish_release.outputs.upload_url }}
        asset_path: release.zip.sha256.asc
        asset_name: release.zip.sha256.asc
        asset_content_type: text/plain

    # Upload public key from the /docs directory
    - name: Upload Public Key
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.publish_release.outputs.upload_url }}
        asset_path: docs/public-key.asc
        asset_name: public-key.asc
        asset_content_type: text/plain
